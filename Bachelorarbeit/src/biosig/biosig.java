package biosig;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class biosig {
  public static long imaxabs(long n) {
    return biosigJNI.imaxabs(n);
  }

  public static imaxdiv_t imaxdiv(long numer, long denom) {
    return new imaxdiv_t(biosigJNI.imaxdiv(numer, denom), true);
  }

  public static long strtoimax(String nptr, SWIGTYPE_p_p_char endptr, int base) {
    return biosigJNI.strtoimax(nptr, SWIGTYPE_p_p_char.getCPtr(endptr), base);
  }

  public static java.math.BigInteger strtoumax(String nptr, SWIGTYPE_p_p_char endptr, int base) {
    return biosigJNI.strtoumax(nptr, SWIGTYPE_p_p_char.getCPtr(endptr), base);
  }

  public static HDRTYPE constructHDR(long NS, long N_EVENT) {
    long cPtr = biosigJNI.constructHDR(NS, N_EVENT);
    return (cPtr == 0) ? null : new HDRTYPE(cPtr, false);
  }

  public static void destructHDR(HDRTYPE hdr) {
    biosigJNI.destructHDR(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static HDRTYPE sopen(String FileName, String MODE, HDRTYPE hdr) {
    long cPtr = biosigJNI.sopen(FileName, MODE, HDRTYPE.getCPtr(hdr), hdr);
    return (cPtr == 0) ? null : new HDRTYPE(cPtr, false);
  }

  public static int sclose(HDRTYPE hdr) {
    return biosigJNI.sclose(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static long sread(SWIGTYPE_p_biosig_data_type data, long start, long length, HDRTYPE hdr) {
    return biosigJNI.sread(SWIGTYPE_p_biosig_data_type.getCPtr(data), start, length, HDRTYPE.getCPtr(hdr), hdr);
  }

  public static long swrite(SWIGTYPE_p_biosig_data_type data, long nelem, HDRTYPE hdr) {
    return biosigJNI.swrite(SWIGTYPE_p_biosig_data_type.getCPtr(data), nelem, HDRTYPE.getCPtr(hdr), hdr);
  }

  public static int seof(HDRTYPE hdr) {
    return biosigJNI.seof(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static void srewind(HDRTYPE hdr) {
    biosigJNI.srewind(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static int sseek(HDRTYPE hdr, int offset, int whence) {
    return biosigJNI.sseek(HDRTYPE.getCPtr(hdr), hdr, offset, whence);
  }

  public static int stell(HDRTYPE hdr) {
    return biosigJNI.stell(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static int serror2(HDRTYPE hdr) {
    return biosigJNI.serror2(HDRTYPE.getCPtr(hdr), hdr);
  }

  public static int hdr2ascii(HDRTYPE hdr, SWIGTYPE_p_FILE fid, int verbosity) {
    return biosigJNI.hdr2ascii__SWIG_0(HDRTYPE.getCPtr(hdr), hdr, SWIGTYPE_p_FILE.getCPtr(fid), verbosity);
  }

  public static int RerefCHANNEL(HDRTYPE hdr, SWIGTYPE_p_void ReRef, char rrtype) {
    return biosigJNI.RerefCHANNEL(HDRTYPE.getCPtr(hdr), hdr, SWIGTYPE_p_void.getCPtr(ReRef), rrtype);
  }

  public static String GetFileTypeString(FileFormat FMT) {
    return biosigJNI.GetFileTypeString(FMT.swigValue());
  }

  public static int PhysDimCode(String PhysDim0) {
    return biosigJNI.PhysDimCode(PhysDim0);
  }

  public static String PhysDim3(int PhysDimCode) {
    return biosigJNI.PhysDim3(PhysDimCode);
  }

  public static void serror() {
    biosigJNI.serror();
  }

  public static void hdr2ascii(HDRTYPE hdr, int verbosity) {
    biosigJNI.hdr2ascii__SWIG_1(HDRTYPE.getCPtr(hdr), hdr, verbosity);
  }

}
